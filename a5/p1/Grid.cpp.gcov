        -:    0:Source:Grid.cpp
        -:    0:Graph:Grid.gcno
        -:    0:Data:Grid.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <cstdlib>
        -:    2:#include "Grid.h"
        -:    3:
        -:    4:/*
        -:    5:
        -:    6:  Name: Matthew Smith
        -:    7:  MRU E-mail:  msmit474@mtroyal.ca
        -:    8:  Course:      COMP 1633-001
        -:    9:  Assignment:  5 part 1
        -:   10:  Due Date:    Friday, April 5, 2019 at 11:59 p.m.
        -:   11:  Instructor:  Paul Pospisil
        -:   12:
        -:   13:  Source File: Grid.cpp
        -:   14:
        -:   15: */
        -:   16:
        8:   17:Grid :: Grid ( )
        -:   18:{
        -:   19:   int i, j;
        -:   20:
        -:   21:
      128:   22:   for (j = 0; j < YMAX; j++)
        -:   23:   {
     6120:   24:      for (i = 0; i < XMAX; i++)
        -:   25:      {
     6000:   26:         raster[j][i] = ' ';
        -:   27:      }
      120:   28:      raster[j][XMAX] = EOLN;
      120:   29:      raster[j][XMAX+1] = EOSTR;
        -:   30:   } 
        8:   31:   return;
        -:   32:}
        -:   33:
      133:   34:void Grid :: plot_point (int x, int y)
        -:   35:{
      133:   36:   if (is_in_bounds (x, y))
      133:   37:      raster[y][x] = '*';
      133:   38:   return;
        -:   39:}
        -:   40:
        5:   41:void Grid :: plot_line (int x1, int y1, int x2, int y2)
        -:   42:{
        -:   43:   int deltax, deltay;                         // required run for line
        -:   44:   int x, y;                                   // coordinates of a point
        -:   45:   int xinc1, xinc2;                           // x increments per pixel
        -:   46:   int yinc1, yinc2;                           // y increments per pixel
        -:   47:   int numerator, denominator;                 // ratio of per pixel changes
        -:   48:   int numeratorincrement;                     // numerator increment per pixel
        -:   49:   int numPixels;                              // largest run
        -:   50:
        -:   51:   int pixCount;                               // loop control variables
        5:   52:   deltax = abs(x2 - x1);
        5:   53:   deltay = abs(y2 - y1);
        -:   54:
        -:   55:
        5:   56:   if (x2 >= x1)
        -:   57:   {
        4:   58:      xinc1 = 1;
        4:   59:      xinc2 = 1;
        -:   60:   }
        -:   61:   else
        -:   62:   {
        1:   63:      xinc1 = -1;
        1:   64:      xinc2 = -1;
        -:   65:   }
        5:   66:   if (y2 >= y1)
        -:   67:   {
        4:   68:      yinc1 = 1;
        4:   69:      yinc2 = 1;
        -:   70:   }
        -:   71:   else
        -:   72:   {
        1:   73:      yinc1 = -1;
        1:   74:      yinc2 = -1;
        -:   75:   }
        5:   76:   if (deltax >= deltay)
        -:   77:   {
        3:   78:      xinc1 = 0;
        3:   79:      yinc2 = 0;
        3:   80:      denominator = deltax;
        3:   81:      numerator = deltax / 2;
        3:   82:      numeratorincrement = deltay;
        3:   83:      numPixels = deltax;
        -:   84:   }
        -:   85:   else
        -:   86:   {
        2:   87:      xinc2 = 0;
        2:   88:      yinc1 = 0;
        2:   89:      denominator = deltay;
        2:   90:      numerator = deltay / 2;
        2:   91:      numeratorincrement = deltax;
        2:   92:      numPixels = deltay;
        -:   93:   }
        5:   94:   x = x1;
        5:   95:   y = y1;
        -:   96:
      137:   97:   for (pixCount = 0; pixCount <= numPixels; pixCount++)
        -:   98:   {
      132:   99:      plot_point(x, y);
      132:  100:      numerator += numeratorincrement;
      132:  101:      if (numerator >= denominator)
        -:  102:      {
        2:  103:         numerator -= denominator;
        2:  104:         x += xinc1;
        2:  105:         y += yinc1;
        -:  106:      }
      132:  107:      x += xinc2;
      132:  108:      y += yinc2;
        -:  109:   }
        -:  110:
        5:  111:   return;
        -:  112:}
        -:  113:
        -:  114:
        8:  115:void Grid :: write (ostream& out) const
        -:  116:{
        -:  117:   int i;
        -:  118:
      408:  119:   for (i = 0; i < XMAX; i++)
      400:  120:      out << '-';
        8:  121:   out << endl;
      128:  122:   for (i = 0; i < YMAX; i++)
        -:  123:   {
      120:  124:     out << raster[i];
        -:  125:   }
      408:  126:   for (i = 0; i < XMAX; i++)
      400:  127:      out << '-';
        8:  128:   out << endl;
        -:  129:
        8:  130:   return;
        -:  131:}
        -:  132:
        -:  133:
    #####:  134:ostream& operator << (ostream& out, const Grid& g)
        -:  135:{
    #####:  136:   g.write(out);
        -:  137:   
    #####:  138:   return out;
        -:  139:}
        -:  140:
        -:  141:
      133:  142:bool Grid :: is_in_bounds (int x, int y) const
        -:  143:{
      133:  144:   return ((0 <= x && x < XMAX) && (0 <= y && y < YMAX));
        3:  145:}
